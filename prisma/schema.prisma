// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    email         String    @unique
    emailVerified DateTime?
    phoneNumber   String?
    hash          String?
    image         String?
    addresses     Address[]
    accounts      Account[]
    sessions      Session[]
    reviews       Review[]
    lists         List[]
    orders        Order[]
    cart          UserCart?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id              String    @id @default(cuid())
    addressee       String
    streetAddress   String
    city            String
    state           String
    zipCode         String
    country         String
    isPrimary       Boolean?
    userId          String
    user            User      @relation(fields: [userId], references: [id])

    @@index([userId])
}

model List {
    id          String    @id @default(cuid())
    name        String
    description String?   @db.Text
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    products    Product[]
    isPrivate   Boolean
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([userId])
}

model Order {
    id          String              @id @default(cuid())
    userId      String
    user        User                @relation(fields: [userId], references: [id])
    products    OrderedProduct[]
    total       Float
    createdAt   DateTime            @default(now())
    status      OrderStatus
    deliveredAt DateTime?

    @@index([userId])
}

enum OrderStatus {
    processing
    shipped
    enRoute
    delivered
}

model Company {
    id          String    @id @default(cuid())
    name        String
    logoURL     String
    location    String
    about       String
    products    Product[]
}

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    products    Product[]
}

model Review {
    id          String    @id @default(cuid())
    rating      Float
    title       String    
    body        String?   @db.Text
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    productId   String
    product     Product   @relation(fields: [productId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([userId])
    @@index([productId])
    @@unique([productId, userId])
}

model ProductImage {
    id          String     @id @default(cuid())
    url         String
    productId   String
    product     Product    @relation(fields: [productId], references: [id])
    createdAt   DateTime   @default(now())

    @@index([productId])
}

model Product {
    id              String              @id @default(cuid())
    name            String
    price           Float
    quantity        Int
    description     String              @db.Text
    companyId       String
    company         Company             @relation(fields: [companyId], references: [id])
    categories      Category[]
    reviews         Review[]
    images          ProductImage[]
    lists           List[]
    orderedProduct  OrderedProduct[]
    cartProduct     CartProduct[]
    createdAt       DateTime            @default(now())

    @@index([companyId])
}

model OrderedProduct {
    id                  String        @id @default(cuid())
    productId           String        
    product             Product       @relation(fields: [productId], references: [id])
    orderId             String        
    order               Order         @relation(fields: [orderId], references: [id])
    quantity            Int
    priceAtPurchase     Float

    @@index([productId])
    @@index([orderId])
    @@unique([productId, orderId])
}

model CartProduct {
    id          String    @id @default(cuid())
    productId   String
    product     Product   @relation(fields: [productId], references: [id])
    quantity    Int
    userCartId  String?
    userCart    UserCart? @relation(fields: [userCartId], references: [id])
    tempCartId  String?
    tempCart    TempCart? @relation(fields: [tempCartId], references: [id])

    @@index([productId])
    @@index([userCartId])
    @@index([tempCartId])
    @@unique([productId, userCartId])
    @@unique([productId, tempCartId])
}

model UserCart {
    id          String          @id @default(cuid())
    userId      String          @unique
    user        User            @relation(fields: [userId], references: [id])
    products    CartProduct[]

    @@index([userId])
}

model TempCart {
    id          String          @id @default(cuid())
    cookieId    String          @unique @default(cuid())
    cookie      CartCookie      @relation(fields: [cookieId], references: [id])
    products    CartProduct[]

    @@index([cookieId])
}

model CartCookie {
    id          String          @id @default(cuid())
    tempCartId  String?
    tempCart    TempCart?
}